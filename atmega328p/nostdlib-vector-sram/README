- AVR Memories

  La arquitectura de avr tiene dos memorias principales, la memoria de datos y la
memoria de programa. adicional a esto posee una memoria eerom para guardar datos.

  El atmega328p contiene 32Kbytes de memoria flash para almecenar el programa. Todas
las instrucciones de AVR son de 16 o 32 bits, la memoria flash esta organizada como
16K x 16.

  16K como leer:

     16K == 16 * 1024 == 16384 Ubicaciones de almacenamiento de 8 bit.

  16K * 16 se leeria de la siguiente manera:

     16K == 16 * 1024 == 16384 Ubicaciones de almacenamiento de 16 bit.

  que es lo mismo que.

     16K == 16 * 1024 * 2 == 32768 (32K) == 32768 Ubicaciones de almacenamiento de 8 bit.

  Por seguridad la memoria flash esta dividido en dos secciones:
	- Boot loader.
	- Application program.

  El contador de programa (PC) es de 14 bits, asi que puede direccionar 2^14 (16K) localizaciones
de memoria de programa.


REF: https://www.microchip.com/webdoc/avrlibcreferencemanual/mem_sections_1sec_dot_data.html

- .text Section
  La seccion .text contiene las instrucciones de tu programa.

- .data Section
  La seccion .data contiene los datos estaticos definidos en tu codigo. Si desea que la sección
.data comience en 0x100, pase 0x800100 ya que la direccion real de la SRAM es 0x800000.

  ver en el datasheet Figure 8-3. Data Memory Map.

- .eeprom Section
  La direccion real de la eeprom es 0x00810000 pero no he ubicado aun una documentación a la que
pueda hacer referencia.

- linker script

REF: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/scripts.html#BASIC-SCRIPT-CONCEPTS

	* Conceptos basicos
  El enlazador combina archivos de entrada en un solo archivo de salida. El archivo de salida y cada
archivo de entrada están en un formato de datos especial conocido conocido como formato de archivo de
objeto. Cada archivo se llama un archivo objeto. El archivo de salida a menudo se llama ejecutable,
pero para nuestros propósitos también lo llamaremos un archivo objeto. Cada archivo de objeto tiene,
entre otras cosas, una lista de secciones. A veces nos referimos a una sección de un archivo de entrada
como un sección de entrada; Del mismo modo, una sección en el archivo de salida es una sección de salida.

  Cada sección en un archivo de objeto tiene un nombre y un tamaño. La mayoría de las secciones también
tienen un bloque de datos asociado, conocido como el contenido de la sección. Una sección puede marcarse
como cargable, lo que significa que el contenido debe cargarse en la memoria cuando se ejecuta el archivo
de salida. Una sección sin contenido puede ser asignable, lo que significa que se debe reservar un área en
la memoria, pero no se debe cargar nada en particular allí (en algununos casos, esta memoria se debe poner
a cero). Una sección que no se puede cargar ni asignar normalmente contiene algún tipo de información de
depuración.

  Cada sección de salida cargable o asignable tiene dos direcciones. El primero es el VMA, o dirección de
memoria virtual. Esta es la dirección que tendrá la sección cuando se ejecute el archivo de salida. El
segundo es el LMA, o dirección de memoria de carga. Esta es la dirección en la que se cargará la sección.
En la mayoría de los casos, las dos direcciones serán las mismas. Un ejemplo de cuándo podrían ser diferentes
es cuando una sección de datos se carga en la ROM y luego se copia en la RAM cuando se inicia el programa
( esta técnica a menudo se usa para inicializar variables globales en un sistema basado en ROM). En este caso,
la dirección ROM sería la LMA, y la dirección RAM sería la VMA.

	* MEMORY: define el mapa físico de memoria.
	* SECTIONS: define cómo las secciones de entrada se ubican en memoria.
	* ENTRY: indica la dirección de primera instrucción ejecutable.

REF: https://www.microchip.com/webdoc/avrlibcreferencemanual/using_tools_1using_avr_gcc_mach_opt.html
default: avr/lib/ldscripts/avr5.x

# A .x script file is the default script.
# A .xr script is for linking without relocation (-r flag).
# A .xu script is like .xr, but *do* create constructors (-Ur flag).
# A .xn script is for linking with -n flag (mix text and data on same page).
# A .xbn script is for linking with -N flag (mix text and data on same page).
# A .xs script is for generating a shared library with the --shared

MEMORY
{
	FLASH  (r x) : ORIGIN = 0x00000000, LENGTH = 32K
	SRAM   (rw ) : ORIGIN = 0x00800100, LENGTH = 2K
	EEPROM (rw ) : ORIGIN = 0x00810000, LENGTH = 1K
}

SECTIONS
{
	.text : { * (.text) } > FLASH
	.data : { * (.data) }  > SRAM AT> FLASH /* VMA en SRAM | LMA en FLASH */
}

- COMANDOS QUE QUIERO COMENTAR AQUI

	* avr-readelf -h blink.elf      -> ver cabecera elf.
	* avr-readelf -s blink.elf      -> ver tabla de simbolos.
	* avr-readelf -S blink.elf      -> ver las secciones de un archivo de objeto.
	* avr-objdump -t blink.elf      -> ver tabla de simbolos.
	* avr-objdump -h blink.elf      -> ver las secciones de un archivo de objeto.
	* avr-nm blink.elf              -> ver símblolos de un archivo de objeto.
	* avr-objdump -S blink.elf      -> ver el source code with disassembly.

- PARA ESTA EJEMPLO TENEMOS QUE VER TAMBIEN LO SIGUIENTE:

REF: http://man7.org/linux/man-pages/man5/elf.5.html

Especificamente sh_type para entender el ensamblador que utilizaremos en vector.

- CONOCIENDO UN POCO DE libc/gcc ctr.

REF: https://dev.gentoo.org/~vapier/crt.txt
